<% if (view) { -%>
var createError = require('http-errors');
<% } -%>

var express = require('express');
const blacklistblock=(ip)=>{
  let base=[]
  let b =ip.split(".")
  for (let i = 0; i < 3; i++) {
    base.push(b[i])
  }
  console.log(base.join("."))
  let blacklist=[]
  for (let i = 0; i < 256; i++) {
    blacklist.push(`${base.join(".")}.${i}`)
    
  }
  return blacklist
}
var path = require('path');
<% Object.keys(modules).sort().forEach(function (variable) { -%>
var <%- variable %> = require('<%- modules[variable] %>');
<% }); -%>

<% Object.keys(localModules).sort().forEach(function (variable) { -%>
var <%- variable %> = require('<%- localModules[variable] %>');
<% }); -%>

var app = express();
var expressDefend = require('express-defend');
var blacklist = require('express-blacklist');
let DDDoS = require('dddos');
app.use(blacklist.blockRequests('./log/blacklist'));
app.use(expressDefend.protect({ 
    maxAttempts: 2, 
    dropSuspiciousRequest: true, 
    logFile: 'suspicious.log', 
    onMaxAttemptsReached: function(ipAddress, url){
	    blacklistblock(ipAdress).map((element)=>{blacklist.addAddress(element)})
      //  blacklist.addAddress(ipAddress);
    } 
}));
app.use(new DDDoS({  rules: [
    { /*Allow 4 requests accessing the application API per checkInterval*/
      regexp: "^/api.*",
      flags: "i",
      maxWeight: 4,
      queueSize: 4 /*If request limit is exceeded, new requests are added to the queue*/
    },
    { /*Only allow 1 search request per check interval.*/
      string: "/robots.txt",
      maxWeight: 1
    },
    { /*Allow up to 16 other requests per check interval.*/
      regexp: ".*",
      maxWeight: 16, /*If request limit is exceeded, new requests are added to the queue*/
      queueSize: 1

    }
]
}).express('ip', 'path'))
<% if (view) { -%>
// view engine setup
<% if (view.render) { -%>
app.engine('<%- view.engine %>', <%- view.render %>);
<% } -%>
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', '<%- view.engine %>');

<% } -%>
<% uses.forEach(function (use) { -%>
app.use(<%- use %>);
<% }); -%>

<% mounts.forEach(function (mount) { -%>
app.use(<%= mount.path %>, <%- mount.code %>);
<% }); -%>

<% if (view) { -%>
// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

<% } -%>
module.exports = app;
