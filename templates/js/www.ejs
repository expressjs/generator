#!/usr/bin/env node

/**
 * Module dependencies.
 */

<%- varconst %> app = require('../app');
<%- varconst %> debug = require('debug')('<%- name %>:server');
<%- varconst %> http = require('http');

/**
 * Get port from environment and store in Express.
 */

<%- varconst %> port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

<%- varconst %> server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  <%- varconst %> parsedPort = parseInt(val, 10);

  if (isNaN(parsedPort)) {
    // named pipe
    return val;
  }

  if (parsedPort >= 0) {
    // port number
    return parsedPort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

<% if (es6) { -%>
  <%- varconst %> bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;
<% } else { -%>
  <%- varconst %> bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
<% } -%>

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
<% if (es6) { -%>
      console.error(`${bind} requires elevated privileges`);
<% } else { -%>
      console.error(bind + ' requires elevated privileges');
<% } -%>
      process.exit(1);
      break;
    case 'EADDRINUSE':
<% if (es6) { -%>
      console.error(`${bind} is already in use`);
<% } else { -%>
      console.error(bind + ' is already in use');
<% } -%>
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  <%- varconst %> addr = server.address();
<% if (es6) { -%>
  <%- varconst %> bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
<% } else { -%>
  <%- varconst %> bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
<% } -%>
}
