#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');

var pkg = require('../package.json');

var version = pkg.version;

// Config - CSS engines
var styles = {
  css: {
    ext: 'css',
  },
  less: {
    ext: 'less',
    mw: "app.use(require('less-middleware')(path.join(__dirname, 'public')));",
    dep: { 'less-middleware': '1.0.x' },
  },
  stylus: {
    ext: 'styl',
    mw: "app.use(require('stylus').middleware(path.join(__dirname, 'public')));",
    dep: { stylus: '0.42.3' },
  },
  compass: {
    ext: 'scss',
    mw: "app.use(require('node-compass')({mode: 'expanded'}));",
    dep: { 'node-compass': '0.2.3' },
  },
}

var views = {
  jade: {
    dep: { jade: '~1.5.0' },
    files: [ 'index.jade', 'layout.jade', 'error.jade' ]
  },
  ejs: {
    dep: { ejs: '~0.8.5' },
    files: [ 'index.ejs', 'error.ejs' ],
  },
  hogan: {
    npm: 'hjs',
    dep: { hjs: '~0.0.6' },
    files: [ 'index.hjs', 'error.hjs' ]
  },
  hbs: {
    dep: { hbs: '~2.7.0' },
    files: [ 'index.hbs', 'layout.hbs', 'error.hbs' ],
  },
}

// CLI

program
  .version(version)
  .usage('[options] [dir]')
  .option('-v, --view <engine>', 'use view engine <engine> (see list below)')
  .option('-c, --css <engine>', 'use stylesheet <engine> (see list below)')
  .option('-f, --force', 'force on non-empty directory')
  .on('--help', function(){
    console.log('  Supported view engines:')
    console.log(Object.keys(views).map(function(engine, i) {
      return '   - ' + engine + (i === 0 ? ' (default)' : '')
    }).join('\n'))
    console.log()
    console.log('  Supported css engines:')
    console.log(Object.keys(styles).map(function(engine, i) {
      return '   - ' + engine + (i === 0 ? ' (default)' : '')
    }).join('\n'))
    console.log()
  })
  .parse(process.argv)

// Path

var destination_path = program.args.shift() || '.';

// App name

var app_name = path.basename(path.resolve(destination_path));

// end-of-line code

var eol = os.EOL

// css and view params parsing

if (!program.view) {
  program.view = Object.keys(views)[0]
} else if (views[program.view] == null) {
  abort([
    '',
    '  View engine "' + program.view + '" not supported,',
    '  run "express -h" to get list of supported engines.',
    '',
  ].join('\n'))
}

if (!program.css) {
  program.css = Object.keys(styles)[0]
} else if (styles[program.css] == null) {
  abort([
    '',
    '  CSS engine "' + program.css + '" not supported,',
    '  run "express -h" to get list of supported engines.',
    '',
  ].join('\n'))
}

// Template engine

function load_template(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

var index = load_template('js/routes/index.js');
var users = load_template('js/routes/users.js');

// CSS

var app = fs.readFileSync(__dirname + '/../templates/js/app.js', 'utf-8');
var www = fs.readFileSync(__dirname + '/../templates/js/www', 'utf-8');

// Generate application

(function createApplication(path) {
  emptyDirectory(path, function(empty){
    if (empty || program.force) {
      createApplicationAt(path);
    } else {
      program.confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(destination_path);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path) {
  console.log();
  process.on('exit', function(){
    console.log();
    console.log('   install dependencies:');
    console.log('     $ cd %s && npm install', path);
    console.log();
    console.log('   run the app:');
    console.log('     $ DEBUG=' + app_name + ' ./bin/www');
    console.log();
  });

  mkdir(path, function(){
    mkdir(path + '/public');
    mkdir(path + '/public/javascripts');
    mkdir(path + '/public/images');
    mkdir(path + '/public/stylesheets', function(){
      write(path + '/public/stylesheets/style.' + styles[program.css].ext,
        fs.readFileSync(__dirname + '/../templates/css/style.' + styles[program.css].ext, 'utf8'))
    });

    mkdir(path + '/routes', function(){
      write(path + '/routes/index.js', index);
      write(path + '/routes/users.js', users);
    });

    mkdir(path + '/views', function(){
      ;(views[program.view].files || []).forEach(function(file) {
        copy_template(program.view + '/' + file, path + '/views/' + file)
      })
    });

    // CSS Engine support
    app = app.replace('{css}',
     styles[program.css].mw ? eol + styles[program.css].mw : '')

    // Template support
    app = app.replace('{views}', views[program.view].npm || program.view)

    // package.json
    var pkg = {
        name: app_name
      , version: '0.0.0'
      , private: true
      , scripts: { start: 'node ./bin/www' }
      , dependencies: {
          'express': '~4.8.6',
          'body-parser': '~1.6.6',
          'cookie-parser': '~1.3.2',
          'morgan': '~1.2.3',
          'serve-favicon': '~2.0.1',
          'debug': '~1.0.4'
      }
    }

    mixin(pkg.dependencies, views[program.view].dep)
    mixin(pkg.dependencies, styles[program.css].dep)

    write(path + '/package.json', JSON.stringify(pkg, null, 2));
    write(path + '/app.js', app);
    mkdir(path + '/bin', function(){
      www = www.replace('{name}', app_name);
      write(path + '/bin/www', www, 0755);
    });
  });
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFile(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}

/**
 *  Merges second object to first one.
 */

function mixin(obj, stuff) {
  if (!stuff) return
  for (var i in stuff) {
    obj[i] = stuff[i]
  }
}
